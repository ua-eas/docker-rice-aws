#!/bin/bash

RICE_STARTUP_LOG="rice-startup.log"

# Basic logging command to put timestamps in front of things
log() {
  date +"%b %e, %Y %r $*" >> "$LOGS_DIRECTORY/$RICE_STARTUP_LOG"
}

echo_time() {
  date +"%b%e, %Y %r $*"
}

tomcat_start () {

    # set up default umask
    umask 002
    
    #Set up linking to get LOGS_DIRECTORY backed by EFS
    rm -Rf $LOGS_DIRECTORY
    mkdir -p "/efs/logs/$HOSTNAME/"
    ln -s "/efs/logs/$HOSTNAME/" $LOGS_DIRECTORY

     # re-map the tomcat logs directory to our mapped container volume
    rm -f $TOMCAT_BASE_DIR/logs
    ln -s $LOGS_DIRECTORY $TOMCAT_BASE_DIR/logs

    # ensure that the tomcat temp directory exists
    if [ ! -d $TOMCAT_BASE_DIR/temp ]
    then
        mkdir $TOMCAT_BASE_DIR/temp
    fi

    # make logs directory and rice-startup.log if they do not exists
    if [ ! -f $LOGS_DIRECTORY/$RICE_STARTUP_LOG ]
    then
        mkdir -p $LOGS_DIRECTORY
        log "Creating logs directory."
        echo_time "Creating logs directory."
        touch $LOGS_DIRECTORY/$RICE_STARTUP_LOG
    fi

    chmod -R 777  $LOGS_DIRECTORY
    
    # forcibly run logrotate on our log files during tomcat startup
    logrotate -f /etc/logrotate.conf

    # Make our rice webapp directory if it doesn't exist
    if [ ! -d $TOMCAT_RICE_DIR ]
    then
        mkdir $TOMCAT_RICE_DIR
    fi

    # Extract the WAR file
    cd $TOMCAT_RICE_DIR
    echo "Unzipping $TOMCAT_RICE_DIR/rice.war..."
    unzip -q -u "$TOMCAT_RICE_DIR/rice.war"
    echo "Done!"

    # copy in tomcat configuration files
    log "Copying tomcat configuration files."
    echo_time "Copying tomcat configuration files."
    # create directories if they don't exist
    mkdir -p $TOMCAT_BASE_DIR/conf/
    mkdir -p $TOMCAT_RICE_WEBINF_DIR/classes/
    cp $RICE_CONFIG_DIRECTORY/rice-server.xml $TOMCAT_BASE_DIR/conf/server.xml
    cp $SECURITY_DIRECTORY/tomcat-users.xml $TOMCAT_BASE_DIR/conf/tomcat-users.xml
    cp $TOMCAT_CONFIG_DIRECTORY/logging.properties $TOMCAT_BASE_DIR/conf/logging.properties
    cp $TOMCAT_CONFIG_DIRECTORY/log4j.properties $TOMCAT_RICE_WEBINF_DIR/classes/log4j.properties
    cp $RICE_CONFIG_DIRECTORY/rice-config.xml $TOMCAT_BASE_DIR/conf/rice-config.xml

    # copy in New Relic config file
    log "Copying New Relic configuration file."
    echo_time "Copying New Relic configuration file."
    cp $SECURITY_DIRECTORY/newrelic.yml $TOMCAT_SHARE_LIB/newrelic.yml

    # copy in oracle JDBC drivers
    log "Copying jar files to Tomcat lib directory."
    echo_time "Copying jar files to Tomcat lib directory."
    cp $TOMCAT_CONFIG_DIRECTORY/classes/* $TOMCAT_SHARE_LIB/

    # Get changelogs for liquibase
    log "Loading changelog files for liquibase."
    echo_time "Loading changelog files for liquibase"

    # create new directory to hold the UA changelog files
    mkdir -p $UA_DB_CHANGELOGS_DIR

    # copy rice-db-ua .jar to changelogs directory and extract files
    cp $TOMCAT_RICE_DIR/WEB-INF/lib/rice-db-ua* $UA_DB_CHANGELOGS_DIR/
    cd $UA_DB_CHANGELOGS_DIR/
    unzip rice-db-ua*.jar
    cd -

    # run liquibase here
    # tag with KFS_ENV_NAME until we figure out how to pass in build version like on-premise docker container work
    log "Running liquibase update."
    echo_time "Running liquibase update."
    liquibase_rice_update.sh $KFS_ENV_NAME >> $LOGS_DIRECTORY/$RICE_STARTUP_LOG 2>&1 &

    log "Completed running liquibase update"
    echo_time "Completed running liquibase update"

    # Copy authinfo and regenerate authinfo.db after initial file creation on EC2 instance via CF and OpsWorks
    # Related documentation: http://docs.aws.amazon.com/ses/latest/DeveloperGuide/sendmail.html
    cp $SMTP_SECURITY_DIRECTORY/authinfo /etc/mail/
    makemap hash /etc/mail/authinfo.db < /etc/mail/authinfo
    # Restart sendmail to load new authinfo
    sudo /etc/init.d/sendmail restart

    # set up setenv.sh script for export of environment variables
    cp $RICE_CONFIG_DIRECTORY/rice-setenv.sh $TOMCAT_SHARE_BIN/setenv.sh
    chmod +x $TOMCAT_SHARE_BIN/setenv.sh

    log "Starting up tomcat"
    echo_time "Starting up tomcat"

    $TOMCAT_SHARE_BIN/catalina.sh start

    # ensure logs exists
    touch /logs/rice.log /logs/catalina.out

    # Tail the log files to keep the container alive
    tail -f /logs/rice.log /logs/catalina.out

    return;
}

tomcat_stop() {

    log "Stopping Tomcat application server tomcat ..."
    echo_time "Stopping Tomcat application server tomcat ..."

    $TOMCAT_SHARE_BIN/catalina.sh stop

    sleep 3

    PIDS=`pgrep -f -d' ' `
    log "Unable to stop Tomcat application server tomcat: running PIDS are '$PIDS'."
    echo_time "Unable to stop Tomcat application server tomcat: running PIDS are '$PIDS'."

    return;
}

tomcat_status () {

    PIDS=`pgrep -f -d' ' `
    log "Tomcat application server tomcat is running: PIDS are '$PIDS'."
    echo_time "Tomcat application server tomcat is running: PIDS are '$PIDS'."

    return;
}

log "Calling $0 $1"
echo_time "Calling $0 $1"

case "$1" in
    'start')
           tomcat_start
           ;;
    'stop')
           tomcat_stop
           ;;
    'restart')
           tomcat_stop
           tomcat_start
           ;;
    'status')
           tomcat_status
           ;;
    *)
        log "Invalid input parameter: $1."
        echo_time "Invalid input parameter: $1."
        exit 1
           ;;
esac
